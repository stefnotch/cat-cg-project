#version 450

layout(push_constant) uniform Pass {
    vec2 inputTexelSize;

    bool isFirstPass;
    float threshold;
    float knee;
} pass;

layout(set = 0, binding = 0) uniform sampler2D inputImage;

layout(set = 0, binding = 1, rgba16f) writeonly uniform image2D outputImage;

#define FILTER_SIZE        5
#include "common.glsl"

layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE, local_size_z = 1) in;

vec3 textureSample(vec2 uv, vec2 offset) {
    return textureLod(inputImage, uv + offset * pass.inputTexelSize, 0.0).rgb;
}

float luminance(vec3 color) {
    return dot(color, vec3(0.2126, 0.7152, 0.0722));
}


float karisAverage(vec3 color) {
    return 1.0 / (1.0 + luminance(color));
}

// [Karis2013] proposes reducing the dynamic range before averagig (reduces fireflies effect)
vec3 averageKaris(vec3 p0, vec3 p1, vec3 p2, vec3 p3) {
    vec4 sum = vec4(0.0);
    sum += karisAverage(p0) * vec4(p0, 1.0);
    sum += karisAverage(p1) * vec4(p1, 1.0);
    sum += karisAverage(p2) * vec4(p2, 1.0);
    sum += karisAverage(p3) * vec4(p3, 1.0);
    return sum.rgb / sum.w;
}

vec3 averageStandard(vec3 p0, vec3 p1, vec3 p2, vec3 p3) {
    return (p0 + p1 + p2 + p3) * 0.25;
}

// Using the technique from https://catlikecoding.com/unity/tutorials/advanced-rendering/bloom/
vec3 soft_threshold(vec3 color, float threshold, float knee) {
    // use color's maximum component to determine brightness
    float brightness = max(color.r, max(color.g, color.b));

    // softening curve
    float soft = clamp(brightness - threshold + knee, 0.0, 2.0 * knee);
    soft = (soft * soft) / (4 * knee + 0.00001);

    // contribution factor of the color
    float contribution = max(soft, brightness - threshold);
    contribution /= max(brightness, 0.000001);

    return color * contribution;
}

void main() {
    // one invocation for every texel in the output image
    // (output image has half the size as the input image)
    ivec2 texel_output = ivec2(gl_GlobalInvocationID.xy);
    // uv coordinates in the input image, hence the 2x
    // plus 0.5 to read the pixel from the center
    ivec2 tile_top_left_corner = 2 * ivec2(gl_WorkGroupID) * GROUP_SIZE - FILTER_RADIUS;
    vec2 top_left_uv = (vec2(tile_top_left_corner) + vec2(0.5)) * pass.inputTexelSize;

    for (int i = int(gl_LocalInvocationIndex); i < TILE_PIXEL_COUNT; i += GROUP_THREAD_COUNT) {
        vec2 offset = vec2(i % TILE_SIZE, i / TILE_SIZE);

        vec3 color = textureSample(top_left_uv, offset);
        store_sample(i, color);
    }

    memoryBarrierShared();
    barrier();

    uint center_index = (gl_LocalInvocationID.y + FILTER_RADIUS) * TILE_SIZE
        + (gl_LocalInvocationID.x + FILTER_RADIUS);

    // Source: https://learnopengl.com/Guest-Articles/2022/Phys.-Based-Bloom
    // Take 13 samples around current texel:
    // a - b - c
    // - j - k -
    // d - e - f
    // - l - m -
    // g - h - i
    // === ('e' is the current texel) ===

    vec3 a = load_sample(center_index, ivec2(-2, 2));
    vec3 b = load_sample(center_index, ivec2( 0, 2));
    vec3 c = load_sample(center_index, ivec2( 2, 2));

    vec3 d = load_sample(center_index, ivec2(-2, 0));
    vec3 e = load_sample(center_index, ivec2( 0, 0));
    vec3 f = load_sample(center_index, ivec2( 2, 0));

    vec3 g = load_sample(center_index, ivec2(-2,-2));
    vec3 h = load_sample(center_index, ivec2( 0,-2));
    vec3 i = load_sample(center_index, ivec2( 2,-2));

    vec3 j = load_sample(center_index, ivec2(-1, 1));
    vec3 k = load_sample(center_index, ivec2( 1, 1));
    vec3 l = load_sample(center_index, ivec2(-1,-1));
    vec3 m = load_sample(center_index, ivec2( 1,-1));

    // Apply weighted distribution:
    // 0.5 + 0.125 + 0.125 + 0.125 + 0.125 = 1

    // a,b,d,e * 0.125
    // b,c,e,f * 0.125
    // d,e,g,h * 0.125
    // e,f,h,i * 0.125
    // j,k,l,m * 0.5

    // This shows 5 square areas that are being sampled. But some of them overlap,
    // so to have an energy preserving downsample we need to make some adjustments.
    // The weights are the distributed, so that the sum of j,k,l,m (e.g.)
    // contribute 0.5 to the final color output. The code below is written
    // to effectively yield this sum. We get:
    // 0.125*5 + 0.03125*4 + 0.0625*4 = 1

    vec3 downsample;
    if (pass.isFirstPass) {
        downsample = averageKaris(a,b,d,e) * 0.125 +
            averageKaris(b,c,e,f) * 0.125 +
            averageKaris(d,e,g,h) * 0.125 +
            averageKaris(e,f,h,i) * 0.125 +
            averageKaris(j,k,l,m) * 0.5;

        downsample = soft_threshold(downsample, pass.threshold, pass.knee);
    } else {
        downsample = averageStandard(a,b,d,e) * 0.125 +
            averageStandard(b,c,e,f) * 0.125 +
            averageStandard(d,e,g,h) * 0.125 +
            averageStandard(e,f,h,i) * 0.125 +
            averageStandard(j,k,l,m) * 0.5;
    }

    downsample = max(downsample, 0.0001f);

   // vec2 uvxx = vec2(2 * texel_output + 0.5) * vec2(pass.inputTexelSize);
   // downsample = textureSample(uvxx, vec2( 0, 0));
   downsample = e;


    imageStore(outputImage, texel_output, vec4(downsample, 1.0));
}