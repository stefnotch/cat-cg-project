#version 450

layout(push_constant) uniform Pass {
    vec2 inputTexelSize;
    float intensity;
} pass;

layout(set = 0, binding = 0) uniform sampler2D inputImage;

layout(set = 0, binding = 1, rgba16f) uniform image2D outputImage;

#define FILTER_SIZE        3
#include "common.glsl"

layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE, local_size_z = 1) in;

vec3 textureSample(vec2 uv, vec2 offset) {
    return textureLod(inputImage, uv + offset * pass.inputTexelSize / 2.0, 0.0).rgb;
}

void main() {
    // one invocation for every texel in the output image
    // (output image has double the size as the input image)
    ivec2 texel_output = ivec2(gl_GlobalInvocationID.xy);

    // uv coordinates in the input image, hence the / 2.0
    // plus 0.5 to read the pixel from the center
    ivec2 tile_top_left_corner = ivec2(gl_WorkGroupID) * GROUP_SIZE - FILTER_RADIUS;
    vec2 top_left_uv = (vec2(tile_top_left_corner) + vec2(0.5)) * pass.inputTexelSize / 2.0;

    for (int i = int(gl_LocalInvocationIndex); i < TILE_PIXEL_COUNT; i += GROUP_THREAD_COUNT) {
        vec2 offset = vec2(i % TILE_SIZE, i / TILE_SIZE);

        vec3 color = textureSample(top_left_uv, offset);
        store_sample(i, color);
    }

    memoryBarrierShared();
    barrier();

    uint center_index = (gl_LocalInvocationID.y + FILTER_RADIUS) * TILE_SIZE
                        + (gl_LocalInvocationID.x + FILTER_RADIUS);

    // Source: https://learnopengl.com/Guest-Articles/2022/Phys.-Based-Bloom
    // Take 9 samples around current texel:
    // a - b - c
    // d - e - f
    // g - h - i
    // === ('e' is the current texel) ===
    vec3 a = load_sample(center_index, ivec2(-1,1));
    vec3 b = load_sample(center_index, ivec2(0,1));
    vec3 c = load_sample(center_index, ivec2(1,1));

    vec3 d = load_sample(center_index, ivec2(-1,0));
    vec3 e = load_sample(center_index, ivec2(0,0));
    vec3 f = load_sample(center_index, ivec2(1,0));

    vec3 g = load_sample(center_index, ivec2(-1,-1));
    vec3 h = load_sample(center_index, ivec2(0,-1));
    vec3 i = load_sample(center_index, ivec2(1,-1));

    // Apply weighted distribution, by using a 3x3 tent filter:
    //  1   | 1 2 1 |
    // -- * | 2 4 2 |
    // 16   | 1 2 1 |
    vec3 upsample = 1.0 / 16.0 * (
        4.0 * e +
        2.0 * (b + d + f + h) +
        1.0 * (a + c + g + i)
    );

    upsample *= pass.intensity;

    // blend color additively with previous color
    upsample += imageLoad(outputImage, texel_output).rgb;

    imageStore(outputImage, texel_output, vec4(upsample, 1.0));
}